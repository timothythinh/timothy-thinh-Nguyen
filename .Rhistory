logoColors="rasmol", shadingMode="functional", shadingModeArg="structure",
showLegend=FALSE, askForOverwrite=FALSE)
bs_resnumbers[1]
length(bs_resnumbers)
msaPrettyPrint(Kinase_MSA, output="tex", y=c((bs_resnumbers[1]+200), #(bs_resnumbers[length(bs_resnumbers)]+200)),
#subset=c(1:6), showNames="left", showLogo="top",
#logoColors="rasmol", shadingMode="functional", shadingModeArg="structure",
#showLegend=FALSE, askForOverwrite=FALSE)
#BiocManager::install("muscle")
library(BiocManager)
library(Biostrings)
library(seqinr)
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("msa")
library(msa)
library(bio3d)
library(gplots)
VEGFR2_unaligned <- readAAStringSet("VEGFR2.fasta")
VEGFR2_read <- read.fasta(file = "VEGFR2.fasta")
length(VEGFR2_read)
x <- 1:length(VEGFR2_read)
#when I used the mentioned fasta file, I get a length of 3 and not 8
pdb <- read.pdb('2XIR')
bs <- binding.site(pdb)
bs_resnumbers <- bs$resno
bs$resnames
Matrix2Heatmap <- function(S4sequences, seq_length) {
forheatmap <- matrix(nrow=length(x), ncol=length(x))
for (i in seq_length) {
for (j in seq_length){
string1 <- S4sequences[i]
string2 <- S4sequences[j]
dsl = AAStringSetList(string1)
as.character(unlist(dsl))
cl = as(dsl, "CharacterList")
as.list(cl)
dsl2 = AAStringSetList(string2)
as.character(unlist(dsl2))
cl2 = as(dsl2, "CharacterList")
as.list(cl2)
pa <- pairwiseAlignment(pattern = c(cl2), subject = cl)
forheatmap[i,j] <- score(pa)
}
}
return(forheatmap)
}
#seq_matrix_align <- Matrix2Heatmap(VEGFR2_unaligned, x)
#heatmap.2(seq_matrix_align)
#getting an error trying to make the heatmap. "Error: subscript contains out-of-bounds indices". My guess is probably due to "length(VEGFR2_read)" being 3 and not 8
system.file("tex", "texshade.sty", package="msa")
#Kinase_MSA <- msa(VEGFR2_unaligned)
#coundnt figure out how to fix the error: Error in convertAlnRows(result$msa, type) : There is an invalid aln file!
#Closest thing i found is https://support.bioconductor.org/p/119291/ but still couldnt figure it out.
print(Kinase_MSA, show="complete")
#BiocManager::install("muscle")
library(BiocManager)
library(Biostrings)
library(seqinr)
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("msa")
library(msa)
library(bio3d)
library(gplots)
VEGFR2_unaligned <- readAAStringSet("VEGFR2.fasta")
VEGFR2_read <- read.fasta(file = "VEGFR2.fasta")
length(VEGFR2_read)
x <- 1:length(VEGFR2_read)
#when I used the mentioned fasta file, I get a length of 3 and not 8
pdb <- read.pdb('2XIR')
bs <- binding.site(pdb)
bs_resnumbers <- bs$resno
bs$resnames
Matrix2Heatmap <- function(S4sequences, seq_length) {
forheatmap <- matrix(nrow=length(x), ncol=length(x))
for (i in seq_length) {
for (j in seq_length){
string1 <- S4sequences[i]
string2 <- S4sequences[j]
dsl = AAStringSetList(string1)
as.character(unlist(dsl))
cl = as(dsl, "CharacterList")
as.list(cl)
dsl2 = AAStringSetList(string2)
as.character(unlist(dsl2))
cl2 = as(dsl2, "CharacterList")
as.list(cl2)
pa <- pairwiseAlignment(pattern = c(cl2), subject = cl)
forheatmap[i,j] <- score(pa)
}
}
return(forheatmap)
}
#seq_matrix_align <- Matrix2Heatmap(VEGFR2_unaligned, x)
#heatmap.2(seq_matrix_align)
#getting an error trying to make the heatmap. "Error: subscript contains out-of-bounds indices". My guess is probably due to "length(VEGFR2_read)" being 3 and not 8
system.file("tex", "texshade.sty", package="msa")
#Kinase_MSA <- msa(VEGFR2_unaligned)
#coundnt figure out how to fix the error: Error in convertAlnRows(result$msa, type) : There is an invalid aln file!
#Closest thing i found is https://support.bioconductor.org/p/119291/ but still couldnt figure it out.
#print(Kinase_MSA, show="complete")
bs_resnumbers[1]
length(bs_resnumbers)
#Everything under doesnt work since this doesnt work Kinase_MSA <- msa(VEGFR2_unaligned)
#msaPrettyPrint(Kinase_MSA, output="tex", y=c((bs_resnumbers[1]+200), #(bs_resnumbers[length(bs_resnumbers)]+200)),
#subset=c(1:6), showNames="left", showLogo="top",
#logoColors="rasmol", shadingMode="functional", shadingModeArg="structure",
#showLegend=FALSE, askForOverwrite=FALSE)
install.packages("ggseqlogo")
install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
data(ggseqlogo_sample)
install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
data(ggseqlogo_sample)
ggplot() + geom_logo( seqs_dna$MA0001.1 ) + theme_logo()
install.packages("ggseqlogo")
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
data(ggseqlogo_sample)
ggplot() + geom_logo( seqs_dna$MA0001.1 ) + theme_logo()
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
data(nfkb1.fasta)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
data(nfkb1.fasta)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
data(nfkb1.fasta)
ggplot() + geom_logo( nfkb1.fasta$MA0001.1 ) + theme_logo()
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
data(nfkb1)
ggplot() + geom_logo( nfkb1$MA0001.1 ) + theme_logo()
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
nfkb1 <- readAAStringSet("nfkb1.fasta")
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
nfkb1 <- readAAStringSet("nfkb1.fasta")
nfkb2 <- readAAStringSet("nfkb2.fasta")
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
nfkb1 <- readAAStringSet("nfkb1.fasta")
nfkb2 <- readAAStringSet("nfkb2.fasta")
irf3 <- readAAStringSet("irf3.fasta")
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1.fasta)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
df <- data.frame(seq_name, sequence)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggplot() + geom_logo( nfkb1_data$MA0001.1 ) + theme_logo()
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo( nfkb1_data$MA0001.1 )
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
ggplot() + geom_logo( nfkb1_data$MA0001.1 ) + theme_logo()
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggplot() + geom_logo( nfkb1_data$MA0001.1 ) + theme_logo()
install.packages("ggseqlogo")
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggplot() + geom_logo( nfkb1_data$MA0001.1 ) + theme_logo()
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
remove.packages('ggseqlogo')
install.packages('ggseqlogo')
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggplot() + geom_logo( nfkb1_data$MA0001.1 ) + theme_logo()
install.packages("ggseqlogo")
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggplot() + geom_logo( nfkb1_data$MA0001.1 ) + theme_logo()
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggplot() + geom_logo( nfkb1_data$MA0001.1 ) + theme_logo()
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo( nfkb1_data )
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo( nfkb1_data, method = 'bits' )
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo( nfkb1_data, method = 'prob' )
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo( nfkb1_data )
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo( nfkb1_data, ncol=10 )
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo( nfkb1_data )
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo( nfkb1_data)
ggseqlogo( nfkb2_data)
ggseqlogo( irf3_data)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo(nfkb1_data)
ggseqlogo(nfkb2_data)
ggseqlogo(irf3_data)
ggseqlogo(nfkb2_data$MA0001.1)
head(nfkb1_data)
nfkb1_data
nfkb1_data
ggseqlogo(nfkb2_data$MA0018.2)
ggseqlogo(nfkb2_data$MA0001.1)
ggseqlogo(nfkb2_data$MA0105.1)
ggseqlogo(MA0105.1$MA0105.1)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("MA0105.1.sites")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo(nfkb1_data)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("")
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfk1.sites")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
ggseqlogo(nfkb1_data)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfk1.sites")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
data(nfkb1_data)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfk1.sites")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
nfkb1_data
ggseqlogo(nfkb1_data)
ggseqlogo(nfkb1_data$MA0105.1)
ggseqlogo(nfkb1_data)
nfkb1_data
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
define(nfkb1_data)
#install.packages("ggseqlogo")
require(ggplot2)
require(ggseqlogo)
library("ggseqlogo")
library("Biostrings")
nfkb1 <- readDNAStringSet("nfkb1.fasta")
seq_name = names(nfkb1)
sequence = paste(nfkb1)
nfkb1_data <- data.frame(seq_name, sequence)
nfkb2 <- readDNAStringSet("nfkb2.fasta")
seq_name = names(nfkb2)
sequence = paste(nfkb2)
nfkb2_data <- data.frame(seq_name, sequence)
irf3 <- readDNAStringSet("irf3.fasta")
seq_name = names(irf3)
sequence = paste(irf3)
irf3_data <- data.frame(seq_name, sequence)
ggseqlogo(nfkb1_data)
ggseqlogo(nfkb2_data)
library(bio3d)
demo("pdb")
